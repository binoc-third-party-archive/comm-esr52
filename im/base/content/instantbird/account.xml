<?xml version="1.0"?>

<!DOCTYPE bindings [
  <!ENTITY % accountsDTD SYSTEM "chrome://instantbird/locale/accounts.dtd">
  %accountsDTD;
]>

<bindings id="accountBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="account" extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
    <content>
      <xul:vbox flex="1">
        <xul:hbox flex="1">
          <xul:vbox flex="1">

           <xul:hbox class="accountNameBox">
            <xul:label value="&account.name;" class="accountNameLabel"/>
            <xul:label flex="1" xbl:inherits="value=name"
                         class="accountName"/>
           </xul:hbox>
           <xul:hbox class="accountAliasBox">
            <xul:label value="&account.alias;"/>
            <xul:label flex="1" xbl:inherits="value=alias"
                         class="accountAlias"/>
           </xul:hbox>
           <xul:label class="connecting" anonid="connecting" value="&account.connecting;"/>
           <xul:label class="connected" value="&account.connected;"/>
           <xul:label class="disconnecting" value="&account.disconnecting;"/>
           <xul:label class="disconnected" value="&account.disconnected;"/>
           <xul:description class="error" anonid="error"/>
           <xul:spacer flex="1"/>
          </xul:vbox>
          <xul:vbox align="center">
            <xul:image xbl:inherits="src=prplicon" class="accountIcon"/>
            <xul:image xbl:inherits="src=prplicon" class="accountIconAnim"
		       anonid="prplicon"/>
            <xul:label xbl:inherits="value=protocol" class="prplName"/>
          </xul:vbox>
        </xul:hbox>
        <xul:hbox flex="1" class="account-buttons">
          <xul:checkbox label="&account.autoSignOn;"
			xbl:inherits="checked=autologin"
			oncommand="gAccountManager.autologin()"/>
          <xul:spacer flex="1"/>
          <xul:button class="disconnectButton"
		      label="&account.disconnect.label;"
		      accesskey="&account.disconnect.accesskey;"
                      oncommand="gAccountManager.disconnect()"/>
          <xul:button class="connectButton"
		      label="&account.connect.label;"
		      accesskey="&account.connect.accesskey;"
                      oncommand="gAccountManager.connect()"/>
          <xul:button label="&account.delete.label;"
		      accesskey="&account.delete.accesskey;"
                      oncommand="gAccountManager.delete()"/>
          <xul:button label="&account.edit.label;"
		      accesskey="&account.edit.accesskey;"
                      oncommand="gAccountManager.edit()"/>
        </xul:hbox> 
      </xul:vbox>
    </content>
    <implementation>
     <method name="build">
      <parameter name="aAccount"/>
      <body>
      <![CDATA[
        this._account = aAccount;
        this.setAttribute("name", aAccount.name);
        this.setAttribute("id", aAccount.id);
        var alias = aAccount.alias; 
        if (alias)
          this.setAttribute("alias", alias);
        else
          this.removeAttribute("alias");
        var proto = aAccount.protocol;
        this.setAttribute("protocol", proto.name);
        this.setAttribute("prplicon", "chrome://instantbird/skin/prpl/" +
                                      proto.id + "-48.png");
        var state = "Unknown";
        if (this._account.connected) {
          state = "connected"
        } else if (this._account.disconnected) {
          state = "disconnected"
          if (this._account.connectionStateMsg)
            this.updateConnectionState(true);
        } else if (this._account.connecting) {
          state = "connecting"
          document.getAnonymousElementByAttribute(this, "anonid", "prplicon").animate();
          this.updateConnectionState(false);
        } else if (this._account.disconnecting) {
          state = "connected"
        }
        //dump("state = " + state + "\n");
        this.setAttribute("state", state);
        this.autoLogin = aAccount.autoLogin;
      ]]>
      </body>
     </method>

     <method name="connect">
      <body>
      <![CDATA[
        if (this._account.disconnected)
          this._account.connect();
      ]]>
      </body>
     </method>

     <method name="disconnect">
      <body>
      <![CDATA[
        var acc = this._account;
        if (acc.connected || acc.connecting)
          this._account.disconnect();
      ]]>
      </body>
     </method>

     <method name="delete">
      <body>
      <![CDATA[
        var pcs = Components.classes["@instantbird.org/purple/core;1"]
                            .getService(Ci.purpleICoreService);
        pcs.deleteAccount(this._account.id);
      ]]>
      </body>
     </method>

     <method name="updateConnectionState">
      <parameter name="aIsError"/>
      <body>
      <![CDATA[
        var bundle = document.getElementById("accountsBundle");
        var key = aIsError ? "account.connection.error"
                           : "account.connection.progress";
        var text = this._account.connectionStateMsg;
        text = text ? bundle.getFormattedString(key, [text])
                    : bundle.getString("account.connecting");

        if (aIsError) {
          this.setAttribute("error", "true");
          var error = document.getAnonymousElementByAttribute(this, "anonid", "error");
          setText(error, text);
        }
        else {
          var progress = document.getAnonymousElementByAttribute(this, "anonid", "connecting");
          progress.setAttribute("value", text);
        }
      ]]>
      </body>
     </method>

     <property name="autoLogin">
       <getter>
         <![CDATA[
           return this.hasAttribute("autologin");
         ]]>
       </getter>
       <setter>
         <![CDATA[
           if (val)
             this.setAttribute("autologin", "true");
           else
             this.removeAttribute("autologin");
           if (this._account.autoLogin != val)
             this._account.autoLogin = val;
           return val;
         ]]>
       </setter>
     </property>

     <property name="account">
       <getter>
         <![CDATA[
           return this._account;
         ]]>
       </getter>
     </property>

    </implementation>
  </binding>
</bindings>
